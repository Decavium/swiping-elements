:root {
    --padding: 1rem;
    --borderRadius: 1rem;
    --fontSize: 2rem;
    --paddingTopAndBottom: 0.2rem;

    --playIconSize: 5rem;

    --skeletonBorderRadius: 0.4rem;
    --skeletonOpacity: 0.2;

    /* do not touch - calculated variable */
    --opacityAnimated: 1;

    --primaryColor: rgb(74, 78, 105);
    --primaryColorTransparent: rgb(74, 78, 105, 0.2);
    --primaryColorLight: rgb(74, 78, 105);
    --secondaryColorLight: rgb(242, 233, 228);
    --secondaryColor: rgb(201, 173, 167);
}

body {
    margin: 0;
    background: linear-gradient(var(--secondaryColorLight), var(--secondaryColor));

    /* centre */
    position: relative;
}

/*  Intended to be used on an iPhone SE
    375px Ã— 667px viewport
*/
.demo-viewport-wrapper {
    width: 375px;
    height: 667px;

    /* centre */
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/* scroll snap takes care of restoring scroll position */
.swipe-container {
    display: flex;
    overflow: auto;
    overflow-x: scroll;
    scroll-snap-type: x mandatory;

    /* space for the jiggle animation so it is not cut off */
    padding-top: var(--paddingTopAndBottom);
    padding-bottom: var(--paddingTopAndBottom);

    /* for the custom pointer drag */
    touch-action: none;
}

/* scrollbar should be hidden */
.swipe-container::-webkit-scrollbar {
    display: none;
}

/* main element should always snap into view */
.swipe-element {
    scroll-snap-align: start;
    font-family: sans-serif;
    background-color: var(--primaryColorTransparent);
    border-radius: var(--borderRadius);
    opacity: var(--opacityAnimated);

    overflow: hidden;
    cursor: grab;
}

/* as the fade out is controlled by a function
that measures the mouse/touch in relation to the
screen the fade in is done via an animation */
.swipe-element.visible {
    animation: fadeIn 0.6s;
}

@keyframes fadeIn {
    from {
        opacity: var(--opacityAnimated);
    }

    to {
        opacity: 1;
    }
}

/* when the task is completed it fades out */
.swipe-element.completed {
    animation: fadeOut 0.6s
}

@keyframes fadeOut {
    from {
        opacity: var(--opacityAnimated);
    }

    to {
        opacity: 0;
    }
}

.swipe-element.jiggle {
    animation: jiggle 0.2s infinite;
    -webkit-animation: jiggle 0.2s infinite;
    -moz-animation-duration: 0.2s;
    -moz-animation-name: jiggle;
    -moz-animation-iteration-count: infinite;
    -webkit-transform: rotate(-1deg);
    -moz-transform: rotate(-1deg);
}

.delete-button {
    --translateDistance: calc(var(--padding) / -2);
    --xDistance: calc(var(--paddingTopAndBottom) + var(--translateDistance));

    position: absolute;
    transform: translate(var(--translateDistance), var(--xDistance));

    background-color: var(--primaryColorLight);
    border-radius: 50%;
    height: 100%;
    width: 100%;
    max-width: calc(var(--fontSize)/1.5);
    max-height: calc(var(--fontSize)/1.5);
    cursor: pointer;

    /* only visible when element is jiggling */
    opacity: 0;

    /* center child (play icon) vertically and horizontally */
    display: flex;
    justify-content: center;
    align-items: center;
}

@keyframes fadeOutButton {
    from {
        opacity: 1;
    }

    to {
        opacity: 0;
    }
}

/* Refer to the toggleElementFade function, it controls opacity and animation */
.delete-button.visible {
    opacity: 0;
}

@keyframes fadeInButton {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}

@keyframes jiggle {
    0% {
        transform: rotate(-0.7deg);
    }

    50% {
        transform: rotate(0.7deg);
    }
}

@-webkit-keyframes jiggle {
    0% {
        -webkit-transform: rotate(-0.7deg);
    }

    50% {
        -webkit-transform: rotate(0.7deg);
    }
}

@-moz-keyframes jiggle {
    0% {
        -moz-transform: rotate(-0.7deg);
    }

    50% {
        -moz-transform: rotate(0.7deg);
    }
}

/* smooth collapsing and expanding window with margin and ease */
.element-information {
    overflow: visible;
    margin-top: -120%;
    transition: 400ms;
    transition-timing-function: cubic-bezier(.63, .3, .83, .27);
    /* delay is important so the fade out effect can be seen */
    transition-delay: 750ms;
}

/* returns the margin and the content comes into view */
.swipe-element.expanded>.element-content>.element-information {
    margin-top: 0;
    transition-delay: 0ms;
}

/* fade-out effect for element information */
.element-information>div {
    transition: transform 400ms 400ms, opacity 400ms 400ms !important;
    transform: translateY(0.7rem);
    opacity: 0;
}

/* fade-in effect for element information */
.swipe-element.expanded>.element-content>.element-information>div {
    transition: transform 400ms 400ms, opacity 400ms 400ms !important;
    transform: translateY(0);
    opacity: var(--skeletonOpacity);
}

.element-content {
    min-height: var(--fontSize);
    padding: var(--padding);
}

.skeleton {
    opacity: var(--skeletonOpacity);
    animation: skeleton-loading 1s linear infinite alternate;
}

.skeleton-text {
    width: 100%;
    height: var(--fontSize);
    margin-bottom: .3rem;
    border-radius: var(--skeletonBorderRadius);
}

/* shorten the first line of text */
.skeleton-text.title {
    margin-bottom: 0rem;
    width: 60%;
}

/* shorten the last line of text */
.skeleton-text:last-child {
    margin-bottom: 0;
    width: 80%;
}

.skeleton-video {
    height: 10rem;
    border-radius: var(--skeletonBorderRadius);
    margin: var(--padding);

    /* center child (play icon) vertically and horizontally */
    display: flex;
    justify-content: center;
    align-items: center;
}

@keyframes skeleton-loading {
    0% {
        background-color: var(--primaryColor);
    }

    100% {
        background-color: var(--primaryColorTransparent);
    }
}

/* actions and element should be 100% wide */
.action,
.swipe-element {
    min-width: 100%;
}

.action {
    display: flex;
    align-items: center;
}

/* should remain sticky */
.completed-message {
    position: sticky;
    left: var(--padding);
    right: var(--padding);
}

.material-symbols-outlined.check-circle {
    font-size: var(--fontSize);
    color: var(--secondaryColor);
}

.material-symbols-outlined.remove {
    font-size: calc(var(--fontSize)/2);
    color: var(--secondaryColor);
}

.material-symbols-outlined.play-arrow {
    font-size: var(--playIconSize);
    color: var(--primaryColorLight);
}

/* prevent scolling on jiggle */
.disable-scroll {
    overflow-x: hidden;
}

/* icons shouldn't be interactable */
.prevent-select {
    -webkit-user-select: none;
    /* Safari */
    -ms-user-select: none;
    /* IE 10 and IE 11 */
    user-select: none;
    /* Standard syntax */
}